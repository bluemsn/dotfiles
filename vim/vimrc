" Basic stuff {{{1

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set hidden                 " Keep changed buffers without requiring saves
set ttyfast                " Indicates a faster terminal connection
set viewoptions=unix,slash " Better Unix/Windows compatibility
set modeline               " Allow file specific options

" Use the system's clipboard
" http://twitter.com/mbadran/status/111011179907915776
set clipboard=unnamed

" Make sure Vim has autocmd support
if has('autocmd')
	" Reload .vimrc and .gvimrc files as soon as they have a change
	augroup VimReload
		autocmd!
		autocmd BufWritePost $MYVIMRC source $MYVIMRC
		autocmd BufWritePost $MYGVIMRC source $MYGVIMRC
	augroup END
endif

" Runtime stuff {{{1

" Enable use of the :Man command, for man pages, explained here:
" http://crumbtrail.chesmart.in/post/5024677985/man-vim-dude
runtime ftplugin/man.vim

" Vundle & other extensions (syntaxes, filetype's etc.) {{{1

" Set the filetype stuff to off, required for Vundle
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/ " Add Vundle to the list of things to load
call vundle#rc() " Call a Vundle function... Probably loads Vundle itself

" All of my Vundle bundles {{{2

" Bundles {{{3

" Let Vundle handle itself as a bundle, REQUIRED!
Bundle 'gmarik/vundle'

" My own bundles
Bundle 'Greduan/vim-numbertoggle'

" General
"Bundle 'ervandew/supertab'
"Bundle 'techlivezheng/vim-plugin-minibufexpl'
Bundle 'gmarik/sudo-gui.vim'
"Bundle 'godlygeek/csapprox'
Bundle 'Lokaltog/vim-easymotion'
"Bundle 'mattn/gist-vim'
"Bundle 'nathanaelkane/vim-indent-guides'
"Bundle 'PotHix/Vimpress'
Bundle 'Raimondi/delimitMate'
"Bundle 'scrooloose/nerdtree'
Bundle 'SearchComplete'
Bundle 'skammer/vim-css-color'
Bundle 'sjl/vitality.vim'
Bundle 'taq/vim-git-branch-info'
Bundle 'tsaleh/vim-matchit'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
"Bundle 'YankRing.vim'

" Syntax files
Bundle 'groenewege/vim-less'
Bundle 'mutewinter/vim-css3-syntax'
Bundle 'olivierverdier/python-syntax.vim'
Bundle 'othree/html5.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-markdown'
Bundle 'zaiste/tmux.vim'

" Language specific bundles
Bundle 'nelstrom/vim-markdown-folding'
Bundle 'spf13/PIV'
Bundle 'HTML-AutoCloseTag'

" Color schemes
Bundle 'altercation/vim-colors-solarized'
Bundle 'chriskempson/base16-vim'
Bundle 'nanotech/jellybeans.vim'

" Trying out

" To check out {{{3

"Bundle 'AndrewRadev/sideways.vim'
"Bundle 'benmills/vimux'
"Bundle 'godlygeek/tabular'
"Bundle 'gregsexton/MatchTag'
"Bundle 'jistr/vim-nerdtree-tabs'
"Bundle 'kien/ctrlp.vim'
"Bundle 'kien/rainbow_parentheses.vim'
"Bundle 'Lokaltog/powerline'
"Bundle 'mattn/zencoding-vim'
"Bundle 'mileszs/ack.vim'
"Bundle 'nelstrom/vim-visual-star-search'
"Bundle 'scrooloose/nerdcommenter'
"Bundle 'scrooloose/syntastic'
"Bundle 'Shougo/neocomplcache'
"Bundle 'SirVer/ultisnips'
"Bundle 'sjl/clam.vim'
"Bundle 'sjl/friendly-find'
"Bundle 'sjl/gundo.vim'
"Bundle 'tpope/vim-abolish'
"Bundle 'tpope/vim-commentary'
"Bundle 'tpope/vim-pastie'
"Bundle 'tsaleh/vim-align'
"Bundle 'xolox/vim-shell'

" vim-scripts repos
"Bundle 'Conque-Shell'
"Bundle 'IndexedSearch'
"Bundle 'restore_view.vim'
"Bundle 'sessionman.vim'

" }}}3

" Bundle settings {{{2

" Vim Indent Guides {{{3
"let g:indent_guides_guide_size=1  " Set width of marker to one wide
"let g:indent_guides_enable_on_vim_startup=1 " Load bundle at startup
"au VimEnter * :IndentGuidesEnable " Always load bundle
" Git Branch Info {{{3
let g:git_branch_status_text=' ' " Add a space before info
let g:git_branch_status_head_current=1 " Only show current branch
let g:git_branch_status_nogit='' " Message when there's no Git repo
let g:git_branch_status_around='()' " Enclose the branch in between these
let g:git_branch_file_based=1 " Check the file for info, instead of directory
" NERDtree {{{3
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
" EasyMotion {{{3
let g:EasyMotion_Leader_key='<leader><leader>'
" MiniBufExplorer {{{3
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplUseSingleClick=1
let g:miniBufExplForceSyntaxEnable=1
" Vim Powerline {{{3
let g:Powerline_symbols='fancy'
" }}}3

" }}}2

" Set the filetype stuff to on
filetype on
filetype plugin indent on

" Search & matching {{{1

set wrapscan    " Set the search scan to wrap around to the top of the file
set ignorecase  " Set search scan to ignore case when search is all lowercase
set smartcase   " But recognize uppercase if it is specified
set visualbell  " Set to use visual bell --  the beeping sucks!
set errorbells  " Enable use of (visual) error bells
set incsearch   " Show results of search scan as it finds them
set showmatch   " Always show matching bracket, quote etc.
set matchtime=5 " Tenths of a second to show the matching bracket, quote etc.
set showcmd     " Show the current command in the lower right corner
set magic       " Allow use of regular expressions in the search scans

if &t_Co > 2 || has('gui_running')
	set hls     " Enable the highlighting of the search
endif

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

if has('win32') || has('win64')
	set grepprg=internal " Windows findstr.exe just isn't good enough
endif

" Formatting {{{1

set noexpandtab   " Make sure that every file uses tabs
set shiftround    " Round indent to pultiple of 'shiftwidth'
set backspace=indent,eol,start " Backspace over everything in insert mode
set smartindent   " Do smart indenting when starting a new line
set autoindent    " Copy indent from current line, over to the new line
set fo=vt         " Set the format options ('formatoptions')
set nojoinspaces  " :h joinspaces

" Set the tab width
let s:tabwidth=4
exec 'set tabstop='     . s:tabwidth 
exec 'set shiftwidth='  . s:tabwidth
exec 'set softtabstop=' . s:tabwidth

" Commands options {{{1

set cpoptions=ces$  " Make the 'cw' and like commands put a $ at the end of the
                    " word instead of just deleting and replacing the text

" Command line options {{{1

set ch=2            " Make the command input line two lines high
set shellslash      " Set to use forward slash, in case you're in Windows
set timeout         " Do time out on mappings and others
set timeoutlen=1000 " Set the timeout lenght in milliseconds
set showmode        " Always show the current mode
set showcmd         " Show (partial) command in the last line of screen
set report=4        " Threshold for reporting number of lines changed

" History {{{1

set history=1000 " Keep {num} entries in the command history
set nobackup     " Disable backup files
set noswapfile   " Don't use a swap file in current buffer
set nowb         " Don't write backup before saving

" Undo {{{2

set undofile " Enable persistent undo

" Set persistent undo directory
set undodir=~/.vim/undodir
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), 'p')
endif

" }}}2

" Folds {{{1

set foldenable        " Make sure folding is enabled
set foldmethod=marker " Use manual markers for folds
set foldlevelstart=0  " Always close folds when switching buffers

" These commands open, or can open folds
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo

" Keymappings stuff {{{1

" Leader key(s) {{{2

" Set Leader key to ',', instead of '/'
let mapleader=','
let g:mapleader=','

" Set my local Leader key to '\'
let maplocalLeader = '\\'

" Map CTRL-E to do what ',' used to do
nnoremap <C-e> ,
vnoremap <C-e> ,

" .vimrc stuff {{{2

" Open .vimrc file in a vertical split
nnoremap <silent> <leader>eev :e $MYVIMRC<CR>

" Open .vimrc file as a buffer and open in this split window
nnoremap <silent> <leader>ev :sp $MYVIMRC<CR>

" Arrow keys and 'hjkl' keys {{{2

" Completely disable the use of the arrow keys in command and visual modes
noremap <up> <NOP>
noremap <down> <NOP>
noremap <left> <NOP>
noremap <right> <NOP>

" Fix moving line by line in the paragraph, when soft wrap is on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Smart way to move between windows, uses 'Ctrl+hjkl' instead of 'Ctrl+w+hjkl'
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Leader key mappings {{{2

" Makes it easy to clear out a search, by typing ',<space>'
nnoremap <leader><space> :noh<CR>

" Same as *, but doesn't move the cursor, only highlights
" http://twitter.com/dmedvinsky/status/109304047206547456
nnoremap <silent> <leader>hh :setl hls<CR>:let @/="\\<<C-r><C-w>\\>"<CR>

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<cCR>

" Use ',z' to focus current fold, closing every other fold in the process
" http://twitter.com/dotvimrc/status/129979569045381120
nnoremap <leader>z zMzvzz

" Use capital H/L to first/last non-space character
" http://twitter.com/dotvimrc/status/132489424494792704
noremap H ^
noremap L g_

" Call Preserve() and delete any trailing white space in buffer
nmap <leader>$ :call Preserve("%s/\\s\\+$//e")<CR>

" Make window controls easy
nnoremap <leader>w <C-w>

" Ctrl mappings {{{2

" CTRL-A selects all
" https://github.com/wnodom/wnodom-vim-environment/blob/master/.vimrc#L325
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG

" Re-mappings {{{2

" Indent in visual and select mode automatically re-selects
vnoremap > >gv
vnoremap < <gv

" Select (charwise) the contents of the current line, excluding indentation
" http://twitter.com/dotvimrc/status/155748943001694208
nnoremap vv ^vg_

" Visually select the text that was last edited/pasted
" http://vimcasts.org/episodes/bubbling-text/
nnoremap gV `[v`]

" Bubble single lines
" http://vimcasts.org/episodes/bubbling-text/
nmap <S-up> [e
nmap <S-down> ]e

" Bubble multiple lines
" http://vimcasts.org/episodes/bubbling-text/
vmap <S-up> [egv
vmap <S-down> ]egv

" Fix the '&' command in normal and visual modes
" https://github.com/nelstrom/dotfiles/blob/master/vimrc#L99-L101
nnoremap & :&&<enter>
xnoremap & :&&<enter>

" Make Vim always paste following the indentation for the current block
" http://stackoverflow.com/a/164866/1622940
nnoremap p ]p

" Function keys mappings {{{2

" Allow change of theme from light to dark and vice-versa, with a hotkey
call togglebg#map('<F5>')

" Disable pressing 'F1' for help, and set it equal to Escape
noremap <F1> <esc>

" New mappings {{{2

" Use '<space><space>' to save the file
" https://github.com/jeffkreeftmeijer/dotfiles/blob/master/home/.vimrc#L49-L50
nnoremap <space><space> :w<CR>

" }}}2

" Abbreviations {{{1

" Still gotta put stuff here

" UI related {{{1

" Enable list by default, but set it's options for when it is used
set list                    " Show hidden characters
set listchars=tab:▸\ ,eol:¬ " Set chars to use for 'list'

" Disable softwrap by default, and set it's options, even if disabled
set nowrap    " By default soft-wrap text at window border
set linebreak " Visual linebreak at 'breakat' rather than last char in window

set title          " Change Terminal's title
set numberwidth=4  " Line numbers always be 4 chars wide
set colorcolumn=79 " Put a marker in array of column numbers
set shortmess=astI " :h shortmess
set linespace=0    " No extra spaces between rows

" NOTICE!
" Line numbers and relative line numbers are controlled by this bundle:
" https://github.com/jeffkreeftmeijer/vim-numbertoggle

" Status line {{{2

set laststatus=2 " Always use a statusline 
set ruler        " Put a ruler, when my custom statusline doesn't load

" The Vim statusline is set in a plugin that loads after the .vimrc has been
" loaded, otherwise we can't check for the current Git branch. It is located
" under "~/.vim/after/plugin/statusline.vim"

" Cursor & mouse {{{2

"set scrolloff=999  " Keep the cursor in the middle of the window
set scrolloff=10    " How near the cursor can get to the top/bottom of window
set sidescrolloff=4 " Same as above, but for side scrolling
set sidescroll=1    " Minimal columns to scroll horizontally
set virtualedit=all " Allow the cursor to go to invalid places
set mousehide       " Hide the mouse pointer while typing
set mouse=          " Disable use of mouse

augroup cursorline
	autocmd!

	" Only show 'cursorline' in the current window and in normal mode
	au WinLeave,InsertEnter * set nocursorline
	au WinEnter,InsertLeave * set cursorline

	" Only show 'cursorcolumn' in current window and in normal mode
	au WinLeave,InsertEnter * set nocursorcolumn
	au WinEnter,InsertLeave * set cursorcolumn
augroup END

" Windows/Split-windows {{{2

set fillchars=""             " Don't put window separators between splits
set autowrite                " When switching buffers save file automatically
set autoread                 " Auto read files when edited outside Vim
set tabpagemax=1             " Max tabs to open with the '-p' option
set showtabline=0            " Don't show the Vim tab line
set switchbuf=useopen,usetab " Switch to tab/window if buffer is already open
set guioptions=acirbhv       " Set the GUI options the way I like them
set winminheight=0           " Minimum window height (split window)

" Make sure Vim has autocmd support
if has('autocmd')
	au VimResized * :wincmd =    " Resize split windows when the window is resized

	" Save all buffers when Vim loses focus
	augroup saveall
		autocmd!

		au FocusLost * :wa
		au WinLeave * :wa
	augroup End
endif

" Syntax highlighting {{{2

if &t_Co > 2 || has('gui_running')
	" Switch syntax highlighting on, when the Terminal has colors
	" Or when the GUI is being used
	syntax on
endif

set synmaxcol=1024 " Max chars to highlight in a single, long line

" Solarized settings {{{3

if !has('gui_running')
	" Make Solarized use 256 colors
	let g:solarized_termcolors=16

	" Compatibility for Terminal
	let g:solarized_termtrans=1
endif

" Leave this at normal at all times
let g:solarized_contrast='normal'

" Non-text items visibility, normal low or high
let g:solarized_visibility='normal'

" Show trailing white spaces
let g:solarized_hitrail=1

" Disable the Solarized menu, when using GUI
let g:solarized_menu=0

" }}}3

set background=dark " Use the light/dark version the color scheme
colorscheme base16-default " Set the color scheme to use

if has('gui_running') "{{{2
	" Fix spell check highlighting
	highlight SpellBad term=underline gui=undercurl guisp=Red

	" Set up the GUI cursor to look nice, for each mode
	set guicursor=n-v-c:block-Cursor-blinkon0
	set guicursor+=ve:ver35-Cursor
	set guicursor+=o:hor50-Cursor
	set guicursor+=i-ci:ver25-Cursor
	set guicursor+=r-cr:hor20-Cursor
	set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

	" Set the window position to these coordinates
	winpos 0 0

	" Set the font
	set guifont=Monaco:h11

	if ! $diff " Check if in diff mode
		" If not, do a normal sized window
		set columns=120 lines=40 " Set the width and height of window
	else
		" If yes, then double that for diff mode
		set columns=240 lines=40 " Same here, duh!
	endif

	if has('gui_macvim')
		set fuoptions=maxvert,maxhorz " Full screen means FULL screen
	else
		" Other GUIs, like Gvim, go here
	endif
else
	" Terminal only stuff!
endif "}}}2

" Diff {{{1

set diffopt+=iwhite " Add ignorance of whitespace to diff

" Auto-completion {{{1

set wildmenu              " Use wildmenu auto completion
set wildmode=list:longest " Set options for auto completion
set complete=.,w,b,t      " Default, except that I remove the 'u' option 
set showfulltag           " Show whole tag, not just function name, when
                          " autocompleting by tag
set pumheight=15          " Max lines to show in auto-complete box

set completeopt=longest,menuone

" Macros {{{1

set lazyredraw " Don't update the display while executing macros

" File/Buffer encryption, encoding etc. {{{1

set key=             " Disable encryption file and buffer encryption 
set nobomb           " Don't use BOM's (Byte Order Marks)
set ffs=unix,dos,mac " Set filetype to Unix, Windows and then Mac (Power PC)

" Set the buffer encoding to be UTF-8
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,iso-8859-15
setglobal fileencoding=utf-8

" File type specific stuff {{{1

" Make sure Vim has autocmd support
if has('autocmd')
	" Set to use manual folds in Vim files
	augroup filetype_vim
		autocmd!
		autocmd FileType vim setlocal foldmethod=marker
	augroup END

	" Python specific stuff
	augroup filetype_python
		autocmd!
		autocmd FileType python setlocal expandtab
	augroup END

	augroup filetype_text
		autocmd!
		autocmd FileType text setlocal formatprg=par\ w79r
	augroup END

	" Some settings for fugitive.vim by Tim Pope
	augroup fugitive
		autocmd!
		" Delete object buffers when I leave them
		autocmd BufReadPost fugitive://* set bufhidden=delete
	augroup END
endif " if has('autocmd')

" Functions {{{1

" Add a "number" text object {{{2

" Add's a number as a text object, so from '#123456' the number is everything
" except the '#', at least that's how I understand it.
"
" I got this excellent piece of VimL from here:
" http://sprunge.us/QTPL?vim

onoremap N :<c-u>call <SID>NumberTextObject(0)<CR>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<CR>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<CR>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<CR>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<CR>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<CR>

function! s:NumberTextObject(whole)
	normal! v

	while getline('.')[col('.')] =~# '\v[0-9]'
		normal! l
	endwhile

	if a:whole
		normal! o

		while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
			normal! h
		endwhile
	endif
endfunction

" Motion for next object {{{2

" Motion for "next/last object". For example, "din(" would go to the next "()" pair
" and delete its contents.
"
" I got this one from here:
" https://gist.github.com/1171642

onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<CR>
xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<CR>
onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<CR>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<CR>

onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<CR>
xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<CR>
onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<CR>
xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<CR>

function! s:NextTextObject(motion, dir)
	let c = nr2char(getchar())

	if c ==# "b"
		let c = "("
	elseif c ==# "B"
		let c = "{"
	elseif c ==# "d"
		let c = "["
	endif

	exe "normal! ".a:dir.c."v".a:motion.c
endfunction

" SynStack() {{{2

" This functly allows you to figure out the name of the text object you're on
" top of.
"
" I got this one from here:
" http://vimcasts.org/episodes/creating-colorschemes-for-vim/

function! <SID>SynStack()
	if !exists("*synstack")
		return
	endif
	echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

nnoremap <C-S-p> :call <SID>SynStack()<CR>

" Shell() {{{2

" This function allows you to run shell commands from within Vim, and open it
" in a vertical split
"
" I got this from here:
" https://bitbucket.org/sjl/dotfiles/src/b5e60ade957d/vim/.vimrc?at=default#cl-677

 function! s:ExecuteInShell(command)
	let command = join(map(split(a:command), 'expand(v:val)'))
	let winnr = bufwinnr('^' . command . '$')
	silent! execute  winnr < 0 ? 'botright vnew ' . fnameEscape(command) : winnr . 'wincmd w'
	setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap nonumber
	echo 'Execute ' . command . '...'
	silent! execute 'silent %!'. command
	silent! redraw
	silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
	silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>:AnsiEsc<CR>'
	silent! execute 'nnoremap <silent> <buffer> q :q<CR>'
	silent! execute 'AnsiEsc'
	echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
nnoremap <leader>! :Shell 

" Preserve() {{{2

" I got this one from here:
" http://vimcasts.org/episodes/tidying-whitespace/

function! Preserve(command)
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" Do the business:
	execute a:command
	" Clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction

" ListWrapToggle() {{{2

" The best way I've found of switching between line soft-wrap and showing
" hidden characters.
"
" I designed this myself, here's the latest Gist:
" https://gist.github.com/4210145

function! ListWrapToggle()
	if(&list == 1)
		set nolist
		set wrap
	elseif(&wrap == 1)
		set nowrap
		set list
	else
		set nowrap
		set list
	endif
endfunction

nnoremap <leader>tw :call ListWrapToggle()<CR>

" Recording() {{{2

" This is a function I made myself in order to setup Vim for recording, either
" HD or SD. It just changes window size.
"
" I designed this myself, here's the latest Gist:
" https://gist.github.com/4217374

function! Recording(quality)
	if(a:quality == 'sd')
		set guifont=Monaco:h11

		set columns=89
		set lines=28

		if(g:colors_name == 'solarized')
			set background=light
		endif
	elseif(a:quality == 'hd')
		set guifont=Monaco:h11

		set columns=180
		set lines=44

		if(g:colors_name == 'solarized')
			set background=light
		endif
	elseif(a:quality == 'off')
		if ! $diff " Check if in diff mode
			" If not, do a normal sized window
			set columns=120 lines=40 " Set the width and height of window
		else
			" If yes, then double that for diff mode
			set columns=240 lines=40 " Same here, duh!
		endif

		if(g:colors_name == 'solarized')
			set background=dark
		endif
	endif
endfunction

nnoremap <leader>trs :call Recording('sd')<CR>
nnoremap <leader>trh :call Recording('hd')<CR>
nnoremap <leader>tr :call Recording('off')<CR>

" }}}2

" Tips {{{1

" To show all your commands mapped to your Leader key
" :map <leader>

" To show all help topics containing 'help'
" :h word<CTRL-d>

" }}}1

" vim: set nowrap fdm={{{,}}}
