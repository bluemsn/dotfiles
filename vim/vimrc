" Basic Stuff {{{1

set nocompatible " Forget about being compatible with good ol' Vi
set hidden       " Make sure that unsaved buffers that are to be put in the
                 " background are allowed to go in there.
set ttyfast      " Indicates a faster terminal connection

" Vundle & Other Extensions {{{1

" Set the filetype stuff to off, required for Vundle
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/ " Add Vundle to the list of things to load
call vundle#rc() " Call a Vundle function... Probably loads Vundle itself

" Let Vundle handle itself as a bundle
Bundle 'gmarik/vundle'

" All of my Vundle bundles
Bundle 'tpope/vim-repeat'
Bundle 'spf13/PIV'
Bundle 'vim-scripts/SearchComplete'
Bundle 'jeffkreeftmeijer/vim-numbertoggle'
Bundle 'PotHix/Vimpress'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'taq/vim-git-branch-info'

" Deactivated bundles
"Bundle 'scrooloose/nerdcommenter'
"Bundle 'scrooloose/nerdtree'
"Bundle 'mattn/zencoding-vim'
"Bundle 'tpope/vim-surround'
"Bundle 'vim-scripts/YankRing.vim'
"Bundle 'Raimondi/delimitMate'

" Bundles to check out
"Bundle 'mileszs/ack.vim'
"Bundle 'kien/ctrlp.vim'
"Bundle 'sjl/clam.vim'
"Bundle 'junegunn/tabularize'
"Bundle 'tpope/vim-commentary'
"Bundle 'tpope/vim-fugitive'
"Bundle 'SirVer/ultisnips'

" Syntax files
Bundle 'olivierverdier/python-syntax.vim'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-git'

" Color schemes
Bundle 'nanotech/jellybeans.vim'
Bundle 'altercation/vim-colors-solarized'
Bundle 'chriskempson/base16-vim'

" Set the filetype stuff to on
filetype on
filetype plugin indent on

" Bundle settings {{{2

" Vim Indent Guides {{{3
let g:indent_guides_guide_size=1  " Set width of marker to one wide
let g:indent_guides_enable_on_vim_startup=1 " Load bundle at startup
au VimEnter * :IndentGuidesEnable " Always load bundle
" Tabularize {{{3
" Still need to fill this
" Git Branch Info {{{3
let g:git_branch_status_text=" "
let g:git_branch_status_head_current=1
let g:git_branch_status_nogit=''
let g:git_branch_status_around='()'
let g:git_branch_file_based=1
" }}}3

" }}}2

" Search & Matching {{{1

set wrapscan    " Set the search scan to wrap around to the top of the file
set ignorecase  " Set search scan to ignore case when search is all lowercase
set smartcase   " But recognize uppercase if it is specified
set visualbell  " Set to use visual bell --  the beeping sucks!
set errorbells  " Enable use of (visual) error bells
set incsearch   " Show results of search scan as it finds them
set showmatch   " Always show matching bracket, quote etc.
set matchtime=5 " Tenths of a second to show the matching bracket, quote etc.
set hlsearch    " Enable the highlighting of the search
set showcmd     " Show the current command in the lower right corner
set magic       " Allow use of regular expressions in the search scans

" Spell Checking {{{1

set spell        " Enable spell checking
set spelllang=en " Set the language of spell checking to English

" Command Input Related {{{1

set ch=2       " Make the command input line two lines high
set shellslash " Set to use forward slash, in case you're in Windows

" Formatting {{{1

set tabstop=4     " Number of spaces that defines a "tab"
set shiftwidth=4  " Number of spaces to use for each indent level
set softtabstop=4 " Same as 'tabstop', while doing editing operations
set backspace=indent,eol,start " Allow backspace over everything in insert mode
set smartindent   " Do smart indenting when starting a new line
set autoindent    " Copy indent from current line, over to the new line

" Commands Options {{{1

set cpoptions=ces$  " Make the 'cw' and like commands put a $ at the end of the
                    " word instead of just deleting and replacing the text
set notimeout       " Disable timeout between commands and stuff
set nottimeout      " Disable timeout between commands and stuff, in Terminal

" History {{{1

set history=100 " Keep only 100 entries in the command history
set nobackup    " Disable backup files
set noswapfile  " Don't use a swap file in current buffer
set nowb        " Don't write backup before saving, even if you delete it later

" Folds {{{1

set foldenable        " Make sure folding is enabled
set foldmethod=marker " Use manual markers for folds
set foldlevelstart=0  " Always close folds when switching buffers

" These commands open can open folds
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo

" Keymappings Stuff {{{1

" Set leader to ',', instead of '/'
let mapleader = ','
let g:mapleader = ','

" Set my local leader to '\'
let maplocalleader = '\\'

" Map CTRL-E to do what ',' used to do
nnoremap <c-e> ,
vnoremap <c-e> ,

" Let's make it easy to edit this file, use ',eev' to open this file, and ',ev'
" for opening it in a split window
nnoremap <silent> <leader>eev :e $MYVIMRC<cr>
nnoremap <silent> <leader>ev :sp $MYVIMRC<cr>

" And to source this file as well, use ',sv' to source this file
nnoremap <silent> <leader>sv :so $MYVIMRC<cr>

" Completely disable the use of the arrow keys in command mode
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" And in visual mode
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>

" Fix moving line by line in the paragraph, when soft wrap is on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Smart way to move between windows, uses 'Ctrl+jkhl' instead of 'Ctrl+w+jkhl'
nnoremap <c-j> <c-W>j
nnoremap <c-k> <c-W>k
nnoremap <c-h> <c-W>h
nnoremap <c-l> <c-W>l

" Disable pressing 'F1' for help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Makes it easy to clear out a search, by typing ', '
nnoremap <leader><space> :noh<cr>

" Allow change of theme from light to dark and vice-versa, with a hotkey
call togglebg#map('<F5>')

" Visual mode pressing * or # searches for the current selection, forward and
" backwards respectively
vnoremap <silent> * :call VisualSelection('f')<cr>
vnoremap <silent> # :call VisualSelection('b')<cr>

" Change current WORD in normal mode to UPPERCASE letters using ',U'
nnoremap <leader>U viwU<esc>

" And the same to lowercase using ',u'
nnoremap <leader>u viwu<esc>

" Abbreviations {{{1

" Set abbreviations for all my emails
iabbrev el@@ eduanlavaque@gmail.com
iabbrev es@@ eduan@snapsimpletech.com
iabbrev ew@@ eduan@websharks-inc.com

" Put a copyright notice when I write 'ccopy' in insert mode
iabbrev ccopy Copyright (C) 2012 Eduan Lavaque <eduan@snapsimpletech.com>, all rights reserved.

" User Interface Related {{{1

set list                    " Show hidden characters
set listchars=tab:▸\ ,eol:¬ " Set the characters to use for tab and End Of Line
set colorcolumn=79          " Put a marker in this array of column numbers
set numberwidth=4           " Line numbers always be 4 chars wide
set title                   " Change Terminal's title
set fo=vt                   " Set the format options ('formatoptions')

" NOTICE!
" Line numbers and stuff are controlled by this bundle:
" https://github.com/jeffkreeftmeijer/vim-numbertoggle

" Status line {{{2

if has('statusline')
let &stl=''        " Clear statusline for when vimrc is loaded
let &stl.='[%02n]' " Buffer number of this buffer
let &stl.='%r'     " Show if file is read-only
let &stl.='%m'     " Show modified status of file
let &stl.=' '      " Separator
let &stl.='%<'     " Truncate from here on
let &stl.='%.50F'  " File name
let &stl.=' '      " Separator
let &stl.='[%{empty(&ft)?"":toupper(&ft).", "}' " Current buffer's file type
let &stl.='%{&fenc!=""?&fenc:&enc}'    " Buffer encoding
let &stl.='%{empty(&ff)?"":", ".&ff}]' " File type
let &stl.='%{GitBranchInfoString()}'   " Current Git branch of buffer

let &stl.='%='         " Right line of statusline
let &stl.='[%bx%B]'   " Current character's Hex ID
let &stl.=' '          " Separator
let &stl.='[%l'        " Current line
let &stl.='/'          " Separator for current line and total of lines
let &stl.='%L'         " Total of lines
let &stl.=':'          " Separator
let &stl.='%c'         " Current column
let &stl.='%V]'        " Current virtual column
let &stl.=' '          " Separator
let &stl.='(%P)'       " Total percentage of file shown
endif

" Tell Vim to always put a status line in, even if there is only one window
set laststatus=2

" Cursor & Mouse {{{2

set scrolloff=4     " Keep the cursor 4 lines above/below window edge
set sidescrolloff=4 " Same as above, but for side scrolling
set sidescroll=1    " Minimal columns to scroll horizontally
set virtualedit=all " Allow the cursor to go to invalid places
set mousehide       " Hide the mouse pointer while typing
set mouse=          " Disable use of mouse

augroup cline
	au!

	" Only show 'cursorline' in the current window and in normal mode
	au WinLeave,InsertEnter * set nocursorline
	au WinEnter,InsertLeave * set cursorline

	" Only show 'cursorcolumn' in current window and in normal mode
	au WinLeave,InsertEnter * set nocursorcolumn
	au WinEnter,InsertLeave * set cursorcolumn
augroup END

" Windows/Split-windows {{{2

set fillchars=""             " Don't put window separators between splits
set autowrite                " When switching buffers save file automatically
set autoread                 " Auto read files when edited outside Vim
set tabpagemax=1             " Max tabs to open with the '-p' option
set showtabline=0            " Don't show the Vim tab line
set switchbuf=useopen,usetab " Switch to tab/window if buffer is already open
set guioptions=acirbhv       " Set the GUI options the way I like them
au VimResized * :wincmd =    " Resize split windows when the window is resized

" Setup window colors and size, if in GUI mode
if has('gui_running')
endif
:nohls

" Syntax Highlighting {{{2

set synmaxcol=2048 " Put a max of 2048 chars to highlight in a single line
if &t_Co > 2 || has('gui_running')
	" Switch syntax highlighting on, when the Terminal has colors
	" Or when the GUI is being used
	syntax on
endif

" Solarized settings {{{3

" Make Solarized use 256 colors
let g:solarized_termcolors=256

" Non-text items visibility, normal low or high
let g:solarized_visibility="low"

" Show trailing white spaces
let g:solarized_hitrail=1

" Disable the Solarized menu
let g:solarized_menu=0

" }}}3

set background=dark        " Use the dark version of the color scheme
colorscheme solarized " Set the color scheme to use

" }}}2

if has('gui_running')
	" Fix spell check highlighting
	highlight SpellBad term=underline gui=undercurl guisp=Red

	" Set up the GUI cursor to look nice, for each mode
	set guicursor=n-v-c:block-Cursor-blinkon0
	set guicursor+=ve:ver35-Cursor
	set guicursor+=o:hor50-Cursor
	set guicursor+=i-ci:ver25-Cursor
	set guicursor+=r-cr:hor20-Cursor
	set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

	" Set the window position to coordinates
	winpos 0 0

	" Check if in diff mode
	if ! $diff
		set columns=120 lines=40 " Set the width and height of window
	else
		set columns=240 lines=40 " Same here, duh!
	endif

	if has('gui_macvim')
		set fuoptions=maxvert,maxhorz " Full screen means FULL screen
		set guifont=Menlo:h13         " Set the font
	else
		" Other GUIs like, Gvim go here
	endif
else
	" Terminal only stuff!
endif

" Diff {{{1

" Add ignorance of whitespace to diff
set diffopt+=iwhite

" Auto-completion {{{1

" Enable auto-completion of commands
set wildmenu
set wildmode=list:longest

" Same as default except that I remove the 'u' option
set complete=.,w,b,t

" When completing by tag, show the whole tag, not just the function name
set showfulltag

" Macros {{{1

" Don't update the display while executing macros
set lazyredraw

" File {{{1

" Disable encryption file and buffer encryption
set key=

" Set the default encoding to UTF-8
set encoding=utf-8

" Set Unix as the standard file type
set ffs=unix,dos,mac

" File type specific stuff {{{1

" Set to use manual folds in Vim files
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker
augroup END

" Python specific stuff
augroup filetype_python
	autocmd!
	autocmd FileType python setlocal set expandtab
	autocmd FileType python setlocal set complete+=k~/.vim/syntax/python.vim isk+=.,(
	autocmd FileType python setlocal set smartindent set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
augroup END
